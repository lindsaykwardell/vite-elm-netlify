-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.Query exposing (..)

import Api.InputObject
import Api.Interface
import Api.Object
import Api.Scalar
import Api.ScalarCodecs
import Api.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)


type alias FindTodoByIDRequiredArguments =
    { id : Api.ScalarCodecs.Id }


{-| Find a document from the collection of 'Todo' by its id.

  - id - The 'Todo' document's ID

-}
findTodoByID :
    FindTodoByIDRequiredArguments
    -> SelectionSet decodesTo Api.Object.Todo
    -> SelectionSet (Maybe decodesTo) RootQuery
findTodoByID requiredArgs____ object____ =
    Object.selectionForCompositeField "findTodoByID" [ Argument.required "id" requiredArgs____.id (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ] object____ (Basics.identity >> Decode.nullable)


type alias AllTodosOptionalArguments =
    { size_ : OptionalArgument Int
    , cursor_ : OptionalArgument String
    }


{-|

  - size\_ - The number of items to return per page.
  - cursor\_ - The pagination cursor.

-}
allTodos :
    (AllTodosOptionalArguments -> AllTodosOptionalArguments)
    -> SelectionSet decodesTo Api.Object.TodoPage
    -> SelectionSet decodesTo RootQuery
allTodos fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { size_ = Absent, cursor_ = Absent }

        optionalArgs____ =
            [ Argument.optional "_size" filledInOptionals____.size_ Encode.int, Argument.optional "_cursor" filledInOptionals____.cursor_ Encode.string ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "allTodos" optionalArgs____ object____ Basics.identity


type alias TodosByCompletedFlagOptionalArguments =
    { size_ : OptionalArgument Int
    , cursor_ : OptionalArgument String
    }


type alias TodosByCompletedFlagRequiredArguments =
    { completed : Bool }


{-|

  - size\_ - The number of items to return per page.
  - cursor\_ - The pagination cursor.
  - completed -

-}
todosByCompletedFlag :
    (TodosByCompletedFlagOptionalArguments -> TodosByCompletedFlagOptionalArguments)
    -> TodosByCompletedFlagRequiredArguments
    -> SelectionSet decodesTo Api.Object.TodoPage
    -> SelectionSet decodesTo RootQuery
todosByCompletedFlag fillInOptionals____ requiredArgs____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { size_ = Absent, cursor_ = Absent }

        optionalArgs____ =
            [ Argument.optional "_size" filledInOptionals____.size_ Encode.int, Argument.optional "_cursor" filledInOptionals____.cursor_ Encode.string ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "todosByCompletedFlag" (optionalArgs____ ++ [ Argument.required "completed" requiredArgs____.completed Encode.bool ]) object____ Basics.identity
